2025-06-01 14:32:30,871 - INFO - planetary_motion.py:34 - Using G_val: 39.4784 AU^3 Mâ˜‰^-1 year^-2 (for Solar Masses, AU, Years)
 * Serving Flask app 'server'
 * Debug mode: on
2025-06-01 14:32:30,953 - INFO - _internal.py:97 - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-06-01 14:32:30,954 - INFO - _internal.py:97 - [33mPress CTRL+C to quit[0m
2025-06-01 14:32:30,983 - INFO - _internal.py:97 -  * Restarting with stat
2025-06-01 14:32:37,256 - INFO - planetary_motion.py:34 - Using G_val: 39.4784 AU^3 Mâ˜‰^-1 year^-2 (for Solar Masses, AU, Years)
2025-06-01 14:32:37,325 - WARNING - _internal.py:97 -  * Debugger is active!
2025-06-01 14:32:37,344 - INFO - _internal.py:97 -  * Debugger PIN: 128-978-742
2025-06-01 14:32:37,386 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:37] "GET / HTTP/1.1" 200 -
2025-06-01 14:32:37,491 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:37] "GET /static/js/linkedlist.js HTTP/1.1" 200 -
2025-06-01 14:32:37,492 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:37] "GET /static/css/styles.css HTTP/1.1" 200 -
2025-06-01 14:32:37,492 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:37] "GET /static/js/script.js HTTP/1.1" 200 -
2025-06-01 14:32:38,265 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:38] "GET /static/jpg/lotsofstars.jpg HTTP/1.1" 200 -
2025-06-01 14:32:45,834 - INFO - server.py:32 - init_session: Initializing: solarsys
2025-06-01 14:32:45,835 - INFO - planetary_motion.py:67 - Setting up Solar System scenario. Sun mass: 1.00e+00 Mâ˜‰.

Forward differentiation of function d_n_body_hamiltonian:
def d_n_body_hamiltonian(states : In[Array[_dBodyState, 20]], config : In[_dSimConfig]) -> _dfloat:
	total_kinetic_energy : _dfloat = make__dfloat((float)(0.0),(float)(0.0))
	total_potential_energy : _dfloat = make__dfloat((float)(0.0),(float)(0.0))
	i : int = (int)(0)
	j : int = (int)(0)
	dx : _dfloat
	dy : _dfloat
	dz : _dfloat
	dist_sq : _dfloat
	inv_dist_soft : _dfloat
	s_i_pos_x : _dfloat
	s_i_pos_y : _dfloat
	s_i_pos_z : _dfloat
	s_j_pos_x : _dfloat
	s_j_pos_y : _dfloat
	s_j_pos_z : _dfloat
	s_i_mom_x : _dfloat
	s_i_mom_y : _dfloat
	s_i_mom_z : _dfloat
	s_i_inv_mass : _dfloat
	s_i_mass : _dfloat
	s_j_mass : _dfloat
	i = (int)(0)
	while (i) < ((config).num_bodies) :
		s_i_mom_x = make__dfloat(((((states)[i]).mom).x).val,((((states)[i]).mom).x).dval)
		s_i_mom_y = make__dfloat(((((states)[i]).mom).y).val,((((states)[i]).mom).y).dval)
		s_i_mom_z = make__dfloat(((((states)[i]).mom).z).val,((((states)[i]).mom).z).dval)
		s_i_inv_mass = make__dfloat((((states)[i]).inv_mass).val,(((states)[i]).inv_mass).dval)
		total_kinetic_energy = make__dfloat(((total_kinetic_energy).val) + (((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).val)) * ((float)(0.5))),((total_kinetic_energy).dval) + ((((((((((s_i_mom_x).dval) * ((s_i_mom_x).val)) + (((s_i_mom_x).val) * ((s_i_mom_x).dval))) + ((((s_i_mom_y).dval) * ((s_i_mom_y).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).dval)))) + ((((s_i_mom_z).dval) * ((s_i_mom_z).val)) + (((s_i_mom_z).val) * ((s_i_mom_z).dval)))) * ((s_i_inv_mass).val)) + ((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).dval))) * ((float)(0.5))) + (((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).val)) * ((float)(0.0)))))
		i = (i) + ((int)(1))
	i = (int)(0)
	while (i) < ((config).num_bodies) :
		s_i_pos_x = make__dfloat(((((states)[i]).pos).x).val,((((states)[i]).pos).x).dval)
		s_i_pos_y = make__dfloat(((((states)[i]).pos).y).val,((((states)[i]).pos).y).dval)
		s_i_pos_z = make__dfloat(((((states)[i]).pos).z).val,((((states)[i]).pos).z).dval)
		s_i_mass = make__dfloat((((states)[i]).mass).val,(((states)[i]).mass).dval)
		j = (i) + ((int)(1))
		while (j) < ((config).num_bodies) :
			s_j_pos_x = make__dfloat(((((states)[j]).pos).x).val,((((states)[j]).pos).x).dval)
			s_j_pos_y = make__dfloat(((((states)[j]).pos).y).val,((((states)[j]).pos).y).dval)
			s_j_pos_z = make__dfloat(((((states)[j]).pos).z).val,((((states)[j]).pos).z).dval)
			s_j_mass = make__dfloat((((states)[j]).mass).val,(((states)[j]).mass).dval)
			dx = make__dfloat(((s_j_pos_x).val) - ((s_i_pos_x).val),((s_j_pos_x).dval) - ((s_i_pos_x).dval))
			dy = make__dfloat(((s_j_pos_y).val) - ((s_i_pos_y).val),((s_j_pos_y).dval) - ((s_i_pos_y).dval))
			dz = make__dfloat(((s_j_pos_z).val) - ((s_i_pos_z).val),((s_j_pos_z).dval) - ((s_i_pos_z).dval))
			dist_sq = make__dfloat(((((dx).val) * ((dx).val)) + (((dy).val) * ((dy).val))) + (((dz).val) * ((dz).val)),(((((dx).dval) * ((dx).val)) + (((dx).val) * ((dx).dval))) + ((((dy).dval) * ((dy).val)) + (((dy).val) * ((dy).dval)))) + ((((dz).dval) * ((dz).val)) + (((dz).val) * ((dz).dval))))
			inv_dist_soft = make__dfloat(((float)(1.0)) / (sqrt(((dist_sq).val) + (((config).epsilon_sq).val))),((((float)(0.0)) * (sqrt(((dist_sq).val) + (((config).epsilon_sq).val)))) - (((float)(1.0)) * ((((dist_sq).dval) + (((config).epsilon_sq).dval)) / (((float)(2.0)) * (sqrt(((dist_sq).val) + (((config).epsilon_sq).val))))))) / ((sqrt(((dist_sq).val) + (((config).epsilon_sq).val))) * (sqrt(((dist_sq).val) + (((config).epsilon_sq).val)))))
			total_potential_energy = make__dfloat(((total_potential_energy).val) - ((((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).val)) * ((inv_dist_soft).val)),((total_potential_energy).dval) - (((((((((config).G).dval) * ((s_i_mass).val)) + ((((config).G).val) * ((s_i_mass).dval))) * ((s_j_mass).val)) + (((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).dval))) * ((inv_dist_soft).val)) + ((((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).val)) * ((inv_dist_soft).dval))))
			j = (j) + ((int)(1))
		i = (i) + ((int)(1))
	return make__dfloat(((total_kinetic_energy).val) + ((total_potential_energy).val),((total_kinetic_energy).dval) + ((total_potential_energy).dval))

Generated C code:

#include <math.h>
        
typedef struct {
	float x;
	float y;
	float z;
} Vec3;
typedef struct {
	Vec3 pos;
	Vec3 mom;
	float mass;
	float inv_mass;
} BodyState;
typedef struct {
	float G;
	float dt;
	float epsilon_sq;
	int num_bodies;
} SimConfig;
typedef struct {
	float val;
	float dval;
} _dfloat;
typedef struct {
	_dfloat x;
	_dfloat y;
	_dfloat z;
} _dVec3;
typedef struct {
	_dVec3 pos;
	_dVec3 mom;
	_dfloat mass;
	_dfloat inv_mass;
} _dBodyState;
typedef struct {
	_dfloat G;
	_dfloat dt;
	_dfloat epsilon_sq;
	int num_bodies;
} _dSimConfig;
float n_body_hamiltonian(BodyState* states, SimConfig config);
_dfloat d_n_body_hamiltonian(_dBodyState* states, _dSimConfig config);
float get_dH_dr_k_alpha(BodyState* states_val, SimConfig config_val, int k, int alpha);
float get_dH_dp_k_alpha(BodyState* states_val, SimConfig config_val, int k, int alpha);
void time_step_system(BodyState* current_states, SimConfig config, BodyState* next_states);
_dfloat make__dfloat(float val, float dval);
float n_body_hamiltonian(BodyState* states, SimConfig config) {
	float total_kinetic_energy = (float)(0.0);
	float total_potential_energy = (float)(0.0);
	int i = (int)(0);
	int j = (int)(0);
	float dx;
	dx = 0;
	float dy;
	dy = 0;
	float dz;
	dz = 0;
	float dist_sq;
	dist_sq = 0;
	float inv_dist_soft;
	inv_dist_soft = 0;
	float s_i_pos_x;
	s_i_pos_x = 0;
	float s_i_pos_y;
	s_i_pos_y = 0;
	float s_i_pos_z;
	s_i_pos_z = 0;
	float s_j_pos_x;
	s_j_pos_x = 0;
	float s_j_pos_y;
	s_j_pos_y = 0;
	float s_j_pos_z;
	s_j_pos_z = 0;
	float s_i_mom_x;
	s_i_mom_x = 0;
	float s_i_mom_y;
	s_i_mom_y = 0;
	float s_i_mom_z;
	s_i_mom_z = 0;
	float s_i_inv_mass;
	s_i_inv_mass = 0;
	float s_i_mass;
	s_i_mass = 0;
	float s_j_mass;
	s_j_mass = 0;
	i = (int)(0);
	while ((i) < ((config).num_bodies)) {
		s_i_mom_x = (((states)[i]).mom).x;
		s_i_mom_y = (((states)[i]).mom).y;
		s_i_mom_z = (((states)[i]).mom).z;
		s_i_inv_mass = ((states)[i]).inv_mass;
		total_kinetic_energy = (total_kinetic_energy) + ((((((s_i_mom_x) * (s_i_mom_x)) + ((s_i_mom_y) * (s_i_mom_y))) + ((s_i_mom_z) * (s_i_mom_z))) * (s_i_inv_mass)) * ((float)(0.5)));
		i = (i) + ((int)(1));
	}
	i = (int)(0);
	while ((i) < ((config).num_bodies)) {
		s_i_pos_x = (((states)[i]).pos).x;
		s_i_pos_y = (((states)[i]).pos).y;
		s_i_pos_z = (((states)[i]).pos).z;
		s_i_mass = ((states)[i]).mass;
		j = (i) + ((int)(1));
		while ((j) < ((config).num_bodies)) {
			s_j_pos_x = (((states)[j]).pos).x;
			s_j_pos_y = (((states)[j]).pos).y;
			s_j_pos_z = (((states)[j]).pos).z;
			s_j_mass = ((states)[j]).mass;
			dx = (s_j_pos_x) - (s_i_pos_x);
			dy = (s_j_pos_y) - (s_i_pos_y);
			dz = (s_j_pos_z) - (s_i_pos_z);
			dist_sq = (((dx) * (dx)) + ((dy) * (dy))) + ((dz) * (dz));
			inv_dist_soft = ((float)(1.0)) / (sqrtf((dist_sq) + ((config).epsilon_sq)));
			total_potential_energy = (total_potential_energy) - (((((config).G) * (s_i_mass)) * (s_j_mass)) * (inv_dist_soft));
			j = (j) + ((int)(1));
		}
		i = (i) + ((int)(1));
	}
	return (total_kinetic_energy) + (total_potential_energy);
}
_dfloat d_n_body_hamiltonian(_dBodyState* states, _dSimConfig config) {
	_dfloat total_kinetic_energy = make__dfloat((float)(0.0),(float)(0.0));
	_dfloat total_potential_energy = make__dfloat((float)(0.0),(float)(0.0));
	int i = (int)(0);
	int j = (int)(0);
	_dfloat dx;
	dx.val = 0;
	dx.dval = 0;
	_dfloat dy;
	dy.val = 0;
	dy.dval = 0;
	_dfloat dz;
	dz.val = 0;
	dz.dval = 0;
	_dfloat dist_sq;
	dist_sq.val = 0;
	dist_sq.dval = 0;
	_dfloat inv_dist_soft;
	inv_dist_soft.val = 0;
	inv_dist_soft.dval = 0;
	_dfloat s_i_pos_x;
	s_i_pos_x.val = 0;
	s_i_pos_x.dval = 0;
	_dfloat s_i_pos_y;
	s_i_pos_y.val = 0;
	s_i_pos_y.dval = 0;
	_dfloat s_i_pos_z;
	s_i_pos_z.val = 0;
	s_i_pos_z.dval = 0;
	_dfloat s_j_pos_x;
	s_j_pos_x.val = 0;
	s_j_pos_x.dval = 0;
	_dfloat s_j_pos_y;
	s_j_pos_y.val = 0;
	s_j_pos_y.dval = 0;
	_dfloat s_j_pos_z;
	s_j_pos_z.val = 0;
	s_j_pos_z.dval = 0;
	_dfloat s_i_mom_x;
	s_i_mom_x.val = 0;
	s_i_mom_x.dval = 0;
	_dfloat s_i_mom_y;
	s_i_mom_y.val = 0;
	s_i_mom_y.dval = 0;
	_dfloat s_i_mom_z;
	s_i_mom_z.val = 0;
	s_i_mom_z.dval = 0;
	_dfloat s_i_inv_mass;
	s_i_inv_mass.val = 0;
	s_i_inv_mass.dval = 0;
	_dfloat s_i_mass;
	s_i_mass.val = 0;
	s_i_mass.dval = 0;
	_dfloat s_j_mass;
	s_j_mass.val = 0;
	s_j_mass.dval = 0;
	i = (int)(0);
	while ((i) < ((config).num_bodies)) {
		s_i_mom_x = make__dfloat(((((states)[i]).mom).x).val,((((states)[i]).mom).x).dval);
		s_i_mom_y = make__dfloat(((((states)[i]).mom).y).val,((((states)[i]).mom).y).dval);
		s_i_mom_z = make__dfloat(((((states)[i]).mom).z).val,((((states)[i]).mom).z).dval);
		s_i_inv_mass = make__dfloat((((states)[i]).inv_mass).val,(((states)[i]).inv_mass).dval);
		total_kinetic_energy = make__dfloat(((total_kinetic_energy).val) + (((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).val)) * ((float)(0.5))),((total_kinetic_energy).dval) + ((((((((((s_i_mom_x).dval) * ((s_i_mom_x).val)) + (((s_i_mom_x).val) * ((s_i_mom_x).dval))) + ((((s_i_mom_y).dval) * ((s_i_mom_y).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).dval)))) + ((((s_i_mom_z).dval) * ((s_i_mom_z).val)) + (((s_i_mom_z).val) * ((s_i_mom_z).dval)))) * ((s_i_inv_mass).val)) + ((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).dval))) * ((float)(0.5))) + (((((((s_i_mom_x).val) * ((s_i_mom_x).val)) + (((s_i_mom_y).val) * ((s_i_mom_y).val))) + (((s_i_mom_z).val) * ((s_i_mom_z).val))) * ((s_i_inv_mass).val)) * ((float)(0.0)))));
		i = (i) + ((int)(1));
	}
	i = (int)(0);
	while ((i) < ((config).num_bodies)) {
		s_i_pos_x = make__dfloat(((((states)[i]).pos).x).val,((((states)[i]).pos).x).dval);
		s_i_pos_y = make__dfloat(((((states)[i]).pos).y).val,((((states)[i]).pos).y).dval);
		s_i_pos_z = make__dfloat(((((states)[i]).pos).z).val,((((states)[i]).pos).z).dval);
		s_i_mass = make__dfloat((((states)[i]).mass).val,(((states)[i]).mass).dval);
		j = (i) + ((int)(1));
		while ((j) < ((config).num_bodies)) {
			s_j_pos_x = make__dfloat(((((states)[j]).pos).x).val,((((states)[j]).pos).x).dval);
			s_j_pos_y = make__dfloat(((((states)[j]).pos).y).val,((((states)[j]).pos).y).dval);
			s_j_pos_z = make__dfloat(((((states)[j]).pos).z).val,((((states)[j]).pos).z).dval);
			s_j_mass = make__dfloat((((states)[j]).mass).val,(((states)[j]).mass).dval);
			dx = make__dfloat(((s_j_pos_x).val) - ((s_i_pos_x).val),((s_j_pos_x).dval) - ((s_i_pos_x).dval));
			dy = make__dfloat(((s_j_pos_y).val) - ((s_i_pos_y).val),((s_j_pos_y).dval) - ((s_i_pos_y).dval));
			dz = make__dfloat(((s_j_pos_z).val) - ((s_i_pos_z).val),((s_j_pos_z).dval) - ((s_i_pos_z).dval));
			dist_sq = make__dfloat(((((dx).val) * ((dx).val)) + (((dy).val) * ((dy).val))) + (((dz).val) * ((dz).val)),(((((dx).dval) * ((dx).val)) + (((dx).val) * ((dx).dval))) + ((((dy).dval) * ((dy).val)) + (((dy).val) * ((dy).dval)))) + ((((dz).dval) * ((dz).val)) + (((dz).val) * ((dz).dval))));
			inv_dist_soft = make__dfloat(((float)(1.0)) / (sqrtf(((dist_sq).val) + (((config).epsilon_sq).val))),((((float)(0.0)) * (sqrtf(((dist_sq).val) + (((config).epsilon_sq).val)))) - (((float)(1.0)) * ((((dist_sq).dval) + (((config).epsilon_sq).dval)) / (((float)(2.0)) * (sqrtf(((dist_sq).val) + (((config).epsilon_sq).val))))))) / ((sqrtf(((dist_sq).val) + (((config).epsilon_sq).val))) * (sqrtf(((dist_sq).val) + (((config).epsilon_sq).val)))));
			total_potential_energy = make__dfloat(((total_potential_energy).val) - ((((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).val)) * ((inv_dist_soft).val)),((total_potential_energy).dval) - (((((((((config).G).dval) * ((s_i_mass).val)) + ((((config).G).val) * ((s_i_mass).dval))) * ((s_j_mass).val)) + (((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).dval))) * ((inv_dist_soft).val)) + ((((((config).G).val) * ((s_i_mass).val)) * ((s_j_mass).val)) * ((inv_dist_soft).dval))));
			j = (j) + ((int)(1));
		}
		i = (i) + ((int)(1));
	}
	return make__dfloat(((total_kinetic_energy).val) + ((total_potential_energy).val),((total_kinetic_energy).dval) + ((total_potential_energy).dval));
}
float get_dH_dr_k_alpha(BodyState* states_val, SimConfig config_val, int k, int alpha) {
	_dBodyState d_states[20];
	for (int _i = 0; _i < 20;_i++) {
		d_states[_i].pos.x.val = 0;
		d_states[_i].pos.x.dval = 0;
		d_states[_i].pos.y.val = 0;
		d_states[_i].pos.y.dval = 0;
		d_states[_i].pos.z.val = 0;
		d_states[_i].pos.z.dval = 0;
		d_states[_i].mom.x.val = 0;
		d_states[_i].mom.x.dval = 0;
		d_states[_i].mom.y.val = 0;
		d_states[_i].mom.y.dval = 0;
		d_states[_i].mom.z.val = 0;
		d_states[_i].mom.z.dval = 0;
		d_states[_i].mass.val = 0;
		d_states[_i].mass.dval = 0;
		d_states[_i].inv_mass.val = 0;
		d_states[_i].inv_mass.dval = 0;
	}
	_dSimConfig d_config;
	d_config.G.val = 0;
	d_config.G.dval = 0;
	d_config.dt.val = 0;
	d_config.dt.dval = 0;
	d_config.epsilon_sq.val = 0;
	d_config.epsilon_sq.dval = 0;
	d_config.num_bodies = 0;
	int idx = (int)(0);
	while ((idx) < ((int)(20))) {
		if ((idx) < ((config_val).num_bodies)) {
			((((d_states)[idx]).pos).x).val = (((states_val)[idx]).pos).x;
			((((d_states)[idx]).pos).y).val = (((states_val)[idx]).pos).y;
			((((d_states)[idx]).pos).z).val = (((states_val)[idx]).pos).z;
			((((d_states)[idx]).mom).x).val = (((states_val)[idx]).mom).x;
			((((d_states)[idx]).mom).y).val = (((states_val)[idx]).mom).y;
			((((d_states)[idx]).mom).z).val = (((states_val)[idx]).mom).z;
			(((d_states)[idx]).mass).val = ((states_val)[idx]).mass;
			(((d_states)[idx]).inv_mass).val = ((states_val)[idx]).inv_mass;
		} else {
			((((d_states)[idx]).pos).x).val = (float)(0.0);
			((((d_states)[idx]).pos).y).val = (float)(0.0);
			((((d_states)[idx]).pos).z).val = (float)(0.0);
			((((d_states)[idx]).mom).x).val = (float)(0.0);
			((((d_states)[idx]).mom).y).val = (float)(0.0);
			((((d_states)[idx]).mom).z).val = (float)(0.0);
			(((d_states)[idx]).mass).val = (float)(1.0);
			(((d_states)[idx]).inv_mass).val = (float)(1.0);
		}
		((((d_states)[idx]).pos).x).dval = (float)(0.0);
		((((d_states)[idx]).pos).y).dval = (float)(0.0);
		((((d_states)[idx]).pos).z).dval = (float)(0.0);
		((((d_states)[idx]).mom).x).dval = (float)(0.0);
		((((d_states)[idx]).mom).y).dval = (float)(0.0);
		((((d_states)[idx]).mom).z).dval = (float)(0.0);
		(((d_states)[idx]).mass).dval = (float)(0.0);
		(((d_states)[idx]).inv_mass).dval = (float)(0.0);
		idx = (idx) + ((int)(1));
	}
	((d_config).G).val = (config_val).G;
	((d_config).G).dval = (float)(0.0);
	((d_config).dt).val = (config_val).dt;
	((d_config).dt).dval = (float)(0.0);
	((d_config).epsilon_sq).val = (config_val).epsilon_sq;
	((d_config).epsilon_sq).dval = (float)(0.0);
	(d_config).num_bodies = (config_val).num_bodies;
	if ((k) < ((config_val).num_bodies)) {
		if ((alpha) == ((int)(0))) {
			((((d_states)[k]).pos).x).dval = (float)(1.0);
		} else {
			if ((alpha) == ((int)(1))) {
				((((d_states)[k]).pos).y).dval = (float)(1.0);
			} else {
				((((d_states)[k]).pos).z).dval = (float)(1.0);
			}
		}
	} else {
	}
	return (d_n_body_hamiltonian(d_states,d_config)).dval;
}
float get_dH_dp_k_alpha(BodyState* states_val, SimConfig config_val, int k, int alpha) {
	_dBodyState d_states[20];
	for (int _i = 0; _i < 20;_i++) {
		d_states[_i].pos.x.val = 0;
		d_states[_i].pos.x.dval = 0;
		d_states[_i].pos.y.val = 0;
		d_states[_i].pos.y.dval = 0;
		d_states[_i].pos.z.val = 0;
		d_states[_i].pos.z.dval = 0;
		d_states[_i].mom.x.val = 0;
		d_states[_i].mom.x.dval = 0;
		d_states[_i].mom.y.val = 0;
		d_states[_i].mom.y.dval = 0;
		d_states[_i].mom.z.val = 0;
		d_states[_i].mom.z.dval = 0;
		d_states[_i].mass.val = 0;
		d_states[_i].mass.dval = 0;
		d_states[_i].inv_mass.val = 0;
		d_states[_i].inv_mass.dval = 0;
	}
	_dSimConfig d_config;
	d_config.G.val = 0;
	d_config.G.dval = 0;
	d_config.dt.val = 0;
	d_config.dt.dval = 0;
	d_config.epsilon_sq.val = 0;
	d_config.epsilon_sq.dval = 0;
	d_config.num_bodies = 0;
	int idx = (int)(0);
	while ((idx) < ((int)(20))) {
		if ((idx) < ((config_val).num_bodies)) {
			((((d_states)[idx]).pos).x).val = (((states_val)[idx]).pos).x;
			((((d_states)[idx]).pos).y).val = (((states_val)[idx]).pos).y;
			((((d_states)[idx]).pos).z).val = (((states_val)[idx]).pos).z;
			((((d_states)[idx]).mom).x).val = (((states_val)[idx]).mom).x;
			((((d_states)[idx]).mom).y).val = (((states_val)[idx]).mom).y;
			((((d_states)[idx]).mom).z).val = (((states_val)[idx]).mom).z;
			(((d_states)[idx]).mass).val = ((states_val)[idx]).mass;
			(((d_states)[idx]).inv_mass).val = ((states_val)[idx]).inv_mass;
		} else {
			((((d_states)[idx]).pos).x).val = (float)(0.0);
			((((d_states)[idx]).pos).y).val = (float)(0.0);
			((((d_states)[idx]).pos).z).val = (float)(0.0);
			((((d_states)[idx]).mom).x).val = (float)(0.0);
			((((d_states)[idx]).mom).y).val = (float)(0.0);
			((((d_states)[idx]).mom).z).val = (float)(0.0);
			(((d_states)[idx]).mass).val = (float)(1.0);
			(((d_states)[idx]).inv_mass).val = (float)(1.0);
		}
		((((d_states)[idx]).pos).x).dval = (float)(0.0);
		((((d_states)[idx]).pos).y).dval = (float)(0.0);
		((((d_states)[idx]).pos).z).dval = (float)(0.0);
		((((d_states)[idx]).mom).x).dval = (float)(0.0);
		((((d_states)[idx]).mom).y).dval = (float)(0.0);
		((((d_states)[idx]).mom).z).dval = (float)(0.0);
		(((d_states)[idx]).mass).dval = (float)(0.0);
		(((d_states)[idx]).inv_mass).dval = (float)(0.0);
		idx = (idx) + ((int)(1));
	}
	((d_config).G).val = (config_val).G;
	((d_config).G).dval = (float)(0.0);
	((d_config).dt).val = (config_val).dt;
	((d_config).dt).dval = (float)(0.0);
	((d_config).epsilon_sq).val = (config_val).epsilon_sq;
	((d_config).epsilon_sq).dval = (float)(0.0);
	(d_config).num_bodies = (config_val).num_bodies;
	if ((k) < ((config_val).num_bodies)) {
		if ((alpha) == ((int)(0))) {
			((((d_states)[k]).mom).x).dval = (float)(1.0);
		} else {
			if ((alpha) == ((int)(1))) {
				((((d_states)[k]).mom).y).dval = (float)(1.0);
			} else {
				((((d_states)[k]).mom).z).dval = (float)(1.0);
			}
		}
	} else {
	}
	return (d_n_body_hamiltonian(d_states,d_config)).dval;
}
void time_step_system(BodyState* current_states, SimConfig config, BodyState* next_states) {
	int k = (int)(0);
	float dH_dr_kx;
	dH_dr_kx = 0;
	float dH_dr_ky;
	dH_dr_ky = 0;
	float dH_dr_kz;
	dH_dr_kz = 0;
	float dH_dp_kx;
	dH_dp_kx = 0;
	float dH_dp_ky;
	dH_dp_ky = 0;
	float dH_dp_kz;
	dH_dp_kz = 0;
	k = (int)(0);
	while ((k) < ((config).num_bodies)) {
		dH_dr_kx = get_dH_dr_k_alpha(current_states,config,k,(int)(0));
		dH_dr_ky = get_dH_dr_k_alpha(current_states,config,k,(int)(1));
		dH_dr_kz = get_dH_dr_k_alpha(current_states,config,k,(int)(2));
		(((next_states)[k]).mom).x = ((((current_states)[k]).mom).x) - (((config).dt) * (dH_dr_kx));
		(((next_states)[k]).mom).y = ((((current_states)[k]).mom).y) - (((config).dt) * (dH_dr_ky));
		(((next_states)[k]).mom).z = ((((current_states)[k]).mom).z) - (((config).dt) * (dH_dr_kz));
		(((next_states)[k]).pos).x = (((current_states)[k]).pos).x;
		(((next_states)[k]).pos).y = (((current_states)[k]).pos).y;
		(((next_states)[k]).pos).z = (((current_states)[k]).pos).z;
		((next_states)[k]).mass = ((current_states)[k]).mass;
		((next_states)[k]).inv_mass = ((current_states)[k]).inv_mass;
		k = (k) + ((int)(1));
	}
	k = (int)(0);
	while ((k) < ((config).num_bodies)) {
		dH_dp_kx = get_dH_dp_k_alpha(next_states,config,k,(int)(0));
		dH_dp_ky = get_dH_dp_k_alpha(next_states,config,k,(int)(1));
		dH_dp_kz = get_dH_dp_k_alpha(next_states,config,k,(int)(2));
		(((next_states)[k]).pos).x = ((((next_states)[k]).pos).x) + (((config).dt) * (dH_dp_kx));
		(((next_states)[k]).pos).y = ((((next_states)[k]).pos).y) + (((config).dt) * (dH_dp_ky));
		(((next_states)[k]).pos).z = ((((next_states)[k]).pos).z) + (((config).dt) * (dH_dp_kz));
		k = (k) + ((int)(1));
	}
}
_dfloat make__dfloat(float val, float dval) {
	_dfloat ret;
	ret.val = 0;
	ret.dval = 0;
	(ret).val = val;
	(ret).dval = dval;
	return ret;
}
2025-06-01 14:32:47,922 - INFO - planetary_motion.py:191 - Successfully compiled Loma code: planetary_motion_3d_loma.py to /Users/samvrit/Classes/SP25/CSE 291/LomaVerse/project/_code/n_planets_lib_3d_v2
2025-06-01 14:32:47,927 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:32:47] "POST /init_session HTTP/1.1" 200 -
2025-06-01 14:33:17,286 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:33:17] "GET /state/4a4a0106-7ca6-4ed1-8884-96213e72aed6 HTTP/1.1" 200 -
2025-06-01 14:33:20,938 - INFO - _internal.py:97 - 127.0.0.1 - - [01/Jun/2025 14:33:20] "[36mGET /static/jpg/lotsofstars.jpg HTTP/1.1[0m" 304 -

